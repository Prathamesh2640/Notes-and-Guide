What is metadata in Java?

A) Data about data structures in memory.
B) Information about data stored on disk.
C) Descriptions of classes, interfaces, fields, and methods.
D) Details about runtime environment variables.
Answer: C) Descriptions of classes, interfaces, fields, and methods.
Which package provides classes for Java reflection?

A) java.util
B) java.lang.reflect
C) java.io
D) java.nio
Answer: B) java.lang.reflect
What is the purpose of Java Reflection?

A) To provide access to metadata about classes and objects at runtime.
B) To encrypt and decrypt sensitive information.
C) To optimize code execution.
D) To handle exceptions during runtime.
Answer: A) To provide access to metadata about classes and objects at runtime.
Which class is the entry point for all reflection operations in Java?

A) java.lang.Object
B) java.lang.Class
C) java.lang.reflect.Method
D) java.lang.Runtime
Answer: B) java.lang.Class
How can you obtain the Class object associated with a loaded class in Java?

A) Using the new Class(className) constructor.
B) Using the getClass() method of the Object class.
C) Using the Class.forName(className) method.
D) All of the above.
Answer: C) Using the Class.forName(className) method.
Code Snippets:
Here's a simple Java code snippet demonstrating the use of reflection to get metadata about a class:

java
Copy code
import java.lang.reflect.*;

public class ReflectionExample {
    public static void main(String[] args) {
        try {
            // Get the Class object for String class
            Class<?> stringClass = Class.forName("java.lang.String");

            // Displaying metadata about the String class
            System.out.println("Class Name: " + stringClass.getName());
            System.out.println("Package: " + stringClass.getPackage());
            System.out.println("Superclass: " + stringClass.getSuperclass());
            System.out.println("Modifiers: " + Modifier.toString(stringClass.getModifiers()));

            // Displaying methods declared in the String class
            Method[] methods = stringClass.getDeclaredMethods();
            System.out.println("Methods in String class:");
            for (Method method : methods) {
                System.out.println(method.getName());
            }

            // Displaying fields declared in the String class
            Field[] fields = stringClass.getDeclaredFields();
            System.out.println("Fields in String class:");
            for (Field field : fields) {
                System.out.println(field.getName());
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
