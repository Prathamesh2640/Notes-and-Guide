What is the purpose of transient keyword in Java serialization?

A) It marks variables that should not be serialized.
B) It marks classes that cannot be serialized.
C) It speeds up the serialization process.
D) It marks methods that should not be serialized.
Answer: A) It marks variables that should not be serialized.
Which of the following statements about ObjectOutputStream in Java is true?

A) It is used to write objects to a binary file.
B) It is used to read objects from a text file.
C) It converts text data to binary data.
D) It converts binary data to text data.
Answer: A) It is used to write objects to a binary file.
What is the purpose of serialVersionUID in Java serialization?

A) It is a unique identifier for a serialized object.
B) It represents the version of Java used for serialization.
C) It ensures encryption of serialized data.
D) It marks classes as serializable.
Answer: A) It is a unique identifier for a serialized object.
Which of the following file types is considered a binary file?

A) .txt
B) .java
C) .jpg
D) .html
Answer: C) .jpg
What is the difference between absolute path and relative path in file handling?

A) Absolute path starts from the root directory, while relative path starts from the current directory.
B) Relative path starts from the root directory, while absolute path starts from the current directory.
C) Absolute path is shorter than relative path.
D) Relative path is faster than absolute path.
Answer: A) Absolute path starts from the root directory, while relative path starts from the current directory.
Code Snippets:
Here are a few Java code snippets related to file handling and serialization:

java
Copy code
// Creating a new file using File class
File file = new File("example.txt");
try {
    if (file.createNewFile()) {
        System.out.println("File created successfully!");
    } else {
        System.out.println("File already exists.");
    }
} catch (IOException e) {
    System.out.println("An error occurred.");
    e.printStackTrace();
}

// Serialization example
import java.io.*;

class MyClass implements Serializable {
    String name;
    int age;

    public MyClass(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

public class SerializationExample {
    public static void main(String[] args) {
        MyClass obj = new MyClass("John", 30);
        try {
            FileOutputStream fileOut = new FileOutputStream("object.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(obj);
            out.close();
            fileOut.close();
            System.out.println("Object has been serialized.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
